/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace THORChain_Router {
  export type CoinStruct = {
    asset: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type CoinStructOutput = [string, BigNumber] & {
    asset: string;
    amount: BigNumber;
  };
}

export interface THORChain_RouterInterface extends utils.Interface {
  functions: {
    "RUNE()": FunctionFragment;
    "deposit(address,address,uint256,string)": FunctionFragment;
    "depositWithExpiry(address,address,uint256,string,uint256)": FunctionFragment;
    "returnVaultAssets(address,address,(address,uint256)[],string)": FunctionFragment;
    "transferAllowance(address,address,address,uint256,string)": FunctionFragment;
    "transferOut(address,address,uint256,string)": FunctionFragment;
    "transferOutAndCall(address,address,address,uint256,string)": FunctionFragment;
    "vaultAllowance(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "RUNE"
      | "deposit"
      | "depositWithExpiry"
      | "returnVaultAssets"
      | "transferAllowance"
      | "transferOut"
      | "transferOutAndCall"
      | "vaultAllowance"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "RUNE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositWithExpiry",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "returnVaultAssets",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      THORChain_Router.CoinStruct[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferAllowance",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOut",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOutAndCall",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "RUNE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositWithExpiry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnVaultAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOutAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultAllowance",
    data: BytesLike
  ): Result;

  events: {
    "Deposit(address,address,uint256,string)": EventFragment;
    "TransferAllowance(address,address,address,uint256,string)": EventFragment;
    "TransferOut(address,address,address,uint256,string)": EventFragment;
    "TransferOutAndCall(address,address,uint256,address,address,uint256,string)": EventFragment;
    "VaultTransfer(address,address,tuple[],string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferAllowance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferOut"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferOutAndCall"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultTransfer"): EventFragment;
}

export interface DepositEventObject {
  to: string;
  asset: string;
  amount: BigNumber;
  memo: string;
}
export type DepositEvent = TypedEvent<
  [string, string, BigNumber, string],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface TransferAllowanceEventObject {
  oldVault: string;
  newVault: string;
  asset: string;
  amount: BigNumber;
  memo: string;
}
export type TransferAllowanceEvent = TypedEvent<
  [string, string, string, BigNumber, string],
  TransferAllowanceEventObject
>;

export type TransferAllowanceEventFilter =
  TypedEventFilter<TransferAllowanceEvent>;

export interface TransferOutEventObject {
  vault: string;
  to: string;
  asset: string;
  amount: BigNumber;
  memo: string;
}
export type TransferOutEvent = TypedEvent<
  [string, string, string, BigNumber, string],
  TransferOutEventObject
>;

export type TransferOutEventFilter = TypedEventFilter<TransferOutEvent>;

export interface TransferOutAndCallEventObject {
  vault: string;
  target: string;
  amount: BigNumber;
  finalAsset: string;
  to: string;
  amountOutMin: BigNumber;
  memo: string;
}
export type TransferOutAndCallEvent = TypedEvent<
  [string, string, BigNumber, string, string, BigNumber, string],
  TransferOutAndCallEventObject
>;

export type TransferOutAndCallEventFilter =
  TypedEventFilter<TransferOutAndCallEvent>;

export interface VaultTransferEventObject {
  oldVault: string;
  newVault: string;
  coins: THORChain_Router.CoinStructOutput[];
  memo: string;
}
export type VaultTransferEvent = TypedEvent<
  [string, string, THORChain_Router.CoinStructOutput[], string],
  VaultTransferEventObject
>;

export type VaultTransferEventFilter = TypedEventFilter<VaultTransferEvent>;

export interface THORChain_Router extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: THORChain_RouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    RUNE(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      vault: PromiseOrValue<string>,
      asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      memo: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositWithExpiry(
      vault: PromiseOrValue<string>,
      asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      memo: PromiseOrValue<string>,
      expiration: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    returnVaultAssets(
      router: PromiseOrValue<string>,
      asgard: PromiseOrValue<string>,
      coins: THORChain_Router.CoinStruct[],
      memo: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferAllowance(
      router: PromiseOrValue<string>,
      newVault: PromiseOrValue<string>,
      asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      memo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOut(
      to: PromiseOrValue<string>,
      asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      memo: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOutAndCall(
      target: PromiseOrValue<string>,
      finalToken: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      memo: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vaultAllowance(
      vault: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;
  };

  RUNE(overrides?: CallOverrides): Promise<string>;

  deposit(
    vault: PromiseOrValue<string>,
    asset: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    memo: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositWithExpiry(
    vault: PromiseOrValue<string>,
    asset: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    memo: PromiseOrValue<string>,
    expiration: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  returnVaultAssets(
    router: PromiseOrValue<string>,
    asgard: PromiseOrValue<string>,
    coins: THORChain_Router.CoinStruct[],
    memo: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferAllowance(
    router: PromiseOrValue<string>,
    newVault: PromiseOrValue<string>,
    asset: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    memo: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOut(
    to: PromiseOrValue<string>,
    asset: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    memo: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOutAndCall(
    target: PromiseOrValue<string>,
    finalToken: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amountOutMin: PromiseOrValue<BigNumberish>,
    memo: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vaultAllowance(
    vault: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    RUNE(overrides?: CallOverrides): Promise<string>;

    deposit(
      vault: PromiseOrValue<string>,
      asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      memo: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositWithExpiry(
      vault: PromiseOrValue<string>,
      asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      memo: PromiseOrValue<string>,
      expiration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    returnVaultAssets(
      router: PromiseOrValue<string>,
      asgard: PromiseOrValue<string>,
      coins: THORChain_Router.CoinStruct[],
      memo: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferAllowance(
      router: PromiseOrValue<string>,
      newVault: PromiseOrValue<string>,
      asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      memo: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOut(
      to: PromiseOrValue<string>,
      asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      memo: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOutAndCall(
      target: PromiseOrValue<string>,
      finalToken: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      memo: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    vaultAllowance(
      vault: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Deposit(address,address,uint256,string)"(
      to?: PromiseOrValue<string> | null,
      asset?: PromiseOrValue<string> | null,
      amount?: null,
      memo?: null
    ): DepositEventFilter;
    Deposit(
      to?: PromiseOrValue<string> | null,
      asset?: PromiseOrValue<string> | null,
      amount?: null,
      memo?: null
    ): DepositEventFilter;

    "TransferAllowance(address,address,address,uint256,string)"(
      oldVault?: PromiseOrValue<string> | null,
      newVault?: PromiseOrValue<string> | null,
      asset?: null,
      amount?: null,
      memo?: null
    ): TransferAllowanceEventFilter;
    TransferAllowance(
      oldVault?: PromiseOrValue<string> | null,
      newVault?: PromiseOrValue<string> | null,
      asset?: null,
      amount?: null,
      memo?: null
    ): TransferAllowanceEventFilter;

    "TransferOut(address,address,address,uint256,string)"(
      vault?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      asset?: null,
      amount?: null,
      memo?: null
    ): TransferOutEventFilter;
    TransferOut(
      vault?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      asset?: null,
      amount?: null,
      memo?: null
    ): TransferOutEventFilter;

    "TransferOutAndCall(address,address,uint256,address,address,uint256,string)"(
      vault?: PromiseOrValue<string> | null,
      target?: null,
      amount?: null,
      finalAsset?: null,
      to?: null,
      amountOutMin?: null,
      memo?: null
    ): TransferOutAndCallEventFilter;
    TransferOutAndCall(
      vault?: PromiseOrValue<string> | null,
      target?: null,
      amount?: null,
      finalAsset?: null,
      to?: null,
      amountOutMin?: null,
      memo?: null
    ): TransferOutAndCallEventFilter;

    "VaultTransfer(address,address,tuple[],string)"(
      oldVault?: PromiseOrValue<string> | null,
      newVault?: PromiseOrValue<string> | null,
      coins?: null,
      memo?: null
    ): VaultTransferEventFilter;
    VaultTransfer(
      oldVault?: PromiseOrValue<string> | null,
      newVault?: PromiseOrValue<string> | null,
      coins?: null,
      memo?: null
    ): VaultTransferEventFilter;
  };

  estimateGas: {
    RUNE(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      vault: PromiseOrValue<string>,
      asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      memo: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositWithExpiry(
      vault: PromiseOrValue<string>,
      asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      memo: PromiseOrValue<string>,
      expiration: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    returnVaultAssets(
      router: PromiseOrValue<string>,
      asgard: PromiseOrValue<string>,
      coins: THORChain_Router.CoinStruct[],
      memo: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferAllowance(
      router: PromiseOrValue<string>,
      newVault: PromiseOrValue<string>,
      asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      memo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOut(
      to: PromiseOrValue<string>,
      asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      memo: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOutAndCall(
      target: PromiseOrValue<string>,
      finalToken: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      memo: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vaultAllowance(
      vault: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    RUNE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      vault: PromiseOrValue<string>,
      asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      memo: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositWithExpiry(
      vault: PromiseOrValue<string>,
      asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      memo: PromiseOrValue<string>,
      expiration: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    returnVaultAssets(
      router: PromiseOrValue<string>,
      asgard: PromiseOrValue<string>,
      coins: THORChain_Router.CoinStruct[],
      memo: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferAllowance(
      router: PromiseOrValue<string>,
      newVault: PromiseOrValue<string>,
      asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      memo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOut(
      to: PromiseOrValue<string>,
      asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      memo: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOutAndCall(
      target: PromiseOrValue<string>,
      finalToken: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      memo: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vaultAllowance(
      vault: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
